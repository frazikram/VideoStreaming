version: "3.9"               # Compose schema version (modern Compose largely ignores this; it's fine to keep)

services:                    # Everything below are containers that run together on one default network
  postgres:
    image: postgres:16       # Use official Postgres 16 image
    environment:             # Init user/db at first startup (and used by the server)
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: videostream
    ports: ["5432:5432"]     # Host port 5432 -> container 5432 (so psql can connect from your laptop)
    volumes: ["pgdata:/var/lib/postgresql/data"]  # Named volume so DB data persists across restarts
    healthcheck:             # Wait-until-ready probe for Postgres
      test: ["CMD-SHELL", "pg_isready -U app -d videostream"]
      interval: 5s
      timeout: 3s
      retries: 20

  nats:
    image: nats:2            # NATS messaging server v2
    command: ["-js", "-m", "8222"]   # -js enables JetStream (persistence); -m 8222 exposes monitoring endpoint
    ports: ["4222:4222", "8222:8222"] # 4222 = client connections; 8222 = monitoring UI/JSON

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"  # Start S3-compatible API on 9000; admin console on 9001
    environment:
      MINIO_ROOT_USER: minio           # Root access key (dev only—don’t use in prod)
      MINIO_ROOT_PASSWORD: minio123    # Root secret key
    ports: ["9000:9000", "9001:9001"]  # Expose S3 API and web console to your host
    volumes: ["minio:/data"]           # Persist object data
    healthcheck:                        # Liveness check for MinIO
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 20

volumes:
  pgdata: {}    # Declare named volumes used above
  minio: {}
